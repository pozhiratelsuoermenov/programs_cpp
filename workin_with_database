#include <iostream>
#include <fstream>
#include <string>
#include <conio.h>

using namespace std;

void menu(int& k) {
	system("cls"); //очистка консоли

	char ch[5] = { 0 };

	while (k < 0) {
		k += 5;
	}
	k = k % 5;
	
	ch[k] = '*';


	cout << ch[0] << "добавить" << endl;
	cout << ch[1] << "изменить" << endl;
	cout << ch[2] << "удалить" << endl;
	cout << ch[3] << "вывести" << endl;
	cout << ch[4] << "выход" << endl << endl;
}
void menu2(int k, int& d) {
	system("cls"); //очистка консоли

	string word;
	if (k == 2) word = "изменить";
	if (k == 3) word = "удалить";

	char ch[6] = { 0 };

	while (d < 0) {
		d += 6;
	}
	d = d % 6;

	ch[d] = '*';

	cout << "вы хотите " << word << " данные магазина" << endl;
	cout << ch[0] << "по номеру" << endl;
	cout << ch[1] << "по названию" << endl;
	cout << ch[2] << "по адресу" << endl;
	cout << ch[3] << "по телефону" << endl;
	cout << ch[4] << "по времени работы" << endl;
	cout << ch[5] << "выход" << endl;
}
void menu3(int& k) {
	system("cls"); //очистка консоли

	char ch[4] = { 0 };

	while (k < 0) {
		k += 4;
	}
	k = k % 4;

	ch[k] = '*';

	cout << "вывод: " << endl;
	cout << ch[0] << "всё" << endl;
	cout << ch[1] << "только одно" << endl;
	cout << ch[2] << "в определенном промежутке" << endl;
	cout << ch[3] << "выход" << endl;
}
void slash(int& left, int& right) {
	int buff;

	buff = left;
	left = right;
	right = buff;
}
void slash(string& left, string& right) {
	string buff;

	buff = left;
	left = right;
	right = buff;
}
void print(string* name, string* addr, string* tele, string* time, int st, int kc) {
	for (int i = st; i < kc; i++) {
		cout << "название: " << name[i] << endl;
		cout << "адрес: " << addr[i] << endl;
		cout << "телефон: " << tele[i] << endl;
		cout << "время работы: " << time[i] << endl << endl;
	}

	int g = _getch();
}
void search_magaz(string* name, string* search, int n, int& vivod, int& d) {
	string namesearch;
	bool d1 = 1;
	while (d1 != 0) {
		cout << "введите то, что исчете" << endl;
		getline(cin, namesearch);

		int k = 0;
		for (int i = 0; i < n; i++) {
			if (search[i] == namesearch) {
				k++;
			}
		}

		if (k == 1) {
			for (int i = 0; i < n; i++) {
				if (search[i] == namesearch) {
					vivod = i;
				}
			}
			cout << "мы нашли для только один подходящий вариант, это магазин: " << name[vivod] << endl;
		}

		if (k > 1) {
			cout << "мы нашли для вас " << k << " вариантов" << endl;
			int schet = 0;
			int* schet1 = new int[k];
			for (int i = 0; i < n; i++) {
				if (search[i] == namesearch) {
					cout << schet + 1 << ") " << name[i] << endl;
					schet1[schet] = i;
					schet++;
				}
			}
			cout << "выберите" << endl;
			cin >> schet;
			vivod = schet1[schet];
			d1 = 0;
		}

		if (k == 0) {
			cout << "мы ничего не нашли по вашему запросу" << endl;
			cout << "попробовать снова?" << endl;
			cout << " 0 - нет, 1 - да" << endl;
			cin >> d1;
			if (d1 == 0) {
				d = 0;
			}
		}
	}
}
void search_magaz(string* name, int n, int& vivod, int& d) {
	string namemagaz;
	int k = 0;
	cout << "введите название магазина" << endl;
	cin >> namemagaz;

	for (int i = 0; i < n; i++) {
		if (namemagaz == name[i]) {
			k++;
		}
	}
	if (k == 0) {
		cout << "нет ни одного подходящего варианта" << endl;
		d = 0;

	}
	else {
		if (k > 1) {
			int schet = 0;
			int* schet1 = new int[k];
			cout << "мы нашли для вас " << k << " вариантов" << endl;
			for (int i = 0; i < n; i++) {
				cout << schet + 1 << ")" << name[i] << endl;
				schet1[schet] = i;
				schet++;
			}
			cout << "выберите одно, пожалуйста" << endl;
			cin >> schet;

			vivod = schet1[schet - 1];
		}
		if (k == 1) {
			cout << "мы нашли только одно совпадение: " << endl;

			for (int i = 0; i < n; i++) {
				if (namemagaz == name[i]) {
					cout << name[i] << endl;
					vivod = i;
				}

			}
		}
	}

}
void slash(string*& name, string*& addr, string*& tele, string*& time, int n, int perv, int vtor) {
	slash(name[perv], name[vtor]);
	slash(addr[perv], addr[vtor]);
	slash(tele[perv], tele[vtor]);
	slash(time[perv], time[vtor]);
}
void udal(string*& name, string*& addr, string*& tele, string*& time, int& n, int vibor) {
	//создаю буффер
	string* name1 = new string[n - 1];
	string* addr1 = new string[n - 1];
	string* tele1 = new string[n - 1];
	string* time1 = new string[n - 1];

	int schet = 0; //второй счетсчик
	//заполняю буффер
	for (int i = 0; i < n; i++) {
		if (vibor != i) {
			name1[schet] = name[i];
			addr1[schet] = addr[i];
			tele1[schet] = tele[i];
			time1[schet] = time[i];
			schet++;
		}
	}

	//очищение массива
	delete[] name;
	delete[] addr;
	delete[] tele;
	delete[] time;

	//уменьшаем массив
	n--;

	//получаем данные с буфера
	name = name1;
	addr = addr1;
	tele = tele1;
	time = time1;
}
void edit(string*& name, string*& addr, string*& tele, string*& time, int n, int vibor) {
	getline(cin, name[vibor]); //переход на след строку
	cout << "введите название магазина: ";
	getline(cin, name[vibor]);//перезапись пустой строки на ту что нам нужно
	cout << endl;
	cout << "введите адрес магазина: ";
	getline(cin, addr[vibor]);
	cout << endl;
	cout << "введите телефон магазина: ";
	getline(cin, tele[vibor]);
	cout << endl;
	cout << "введите время работы магазина: ";
	getline(cin, time[vibor]);
	cout << endl;
}
void append(string*& name, string*& addr, string*& tele, string*& time, int& n) {
	//создаю буффер
	string* name1 = new string[n + 1];
	string* addr1 = new string[n + 1];
	string* tele1 = new string[n + 1];
	string* time1 = new string[n + 1];

	//заполня буфер
	for (int i = 0; i < n; i++) {
		name1[i] = name[i];
		addr1[i] = addr[i];
		tele1[i] = tele[i];
		time1[i] = time[i];
	}

	//добавляю данные
	getline(cin, name1[n]); //переход на след строку
	cout << "введите название " << endl;
	getline(cin, name1[n]); //перезапись имени
	cout << "введите адрес " << endl;
	getline(cin, addr1[n]);
	cout << "введите телефон " << endl;
	getline(cin, tele1[n]);
	cout << "введите время работы (пример: 10:00-22:00) " << endl;
	getline(cin, time1[n]);

	//чищу массив
	delete[] name;
	delete[] addr;
	delete[] tele;
	delete[] time;

	//увеличиваю массив
	n++;

	//беру данные с буфера
	name = name1;
	addr = addr1;
	tele = tele1;
	time = time1;
}

int main() {
	setlocale(LC_ALL, "rus");		//подключаем русккие буквы

	ifstream f1;		//работа с файлом
	int n;		//кол-во магазинов

	f1.open("bd.txt");		//открытие файла

	if (!f1.is_open()) {		//проверка открытия файла
		cout << "bd not founded" << endl;
	}
	else {
		bool work = 1; //работа программы
		int k = 0; //выбор меню
		string add; //параметр добавки
		int st;
		int kc;
		int vivod;
		int d1 = 1;

		//обновление данных для вывода
		f1 >> n; //кол-во магазинов
		string* name = new string[n]; //название магазина
		string* addr = new string[n]; //адрес магазина
		string* tele = new string[n]; //телефон магазина
		string* time = new string[n]; //время работы магазина

		//считывание строк
		for (int i = 0; i < n; i++) {
			if (i == 0) {
				getline(f1, name[i]); //переход на следующую строку (name[i] ничего не решает, она перезапишется)
			}
			getline(f1, name[i]); //считывание имени
			getline(f1, addr[i]); //считывание адреса
			getline(f1, tele[i]); //считывание телефона
			getline(f1, time[i]); //считывание времени работы
		}

		int g, g1;
		int d = 0;

		while (work) {
			menu(k);

			int g, g1;
			int d = 0;

			bool work1 = 1;
			g = _getch();

			switch (g) {
			case(72):
				k--;
				break;
			case(75):
				k--;
				break;
			case(80):
				k++;
				break;
			case(77):
				k++;
				break;
			case(13): //если нажмет на enter
				k = k % 5;

				switch (k)
				{
				case(0):
					append(name, addr, tele, time, n);
					break;
				case(1):
					//изменить
					while (work1) {
						menu2(k, d);
						g1 = _getch();
						switch (g1) {
						case(72):
							d--;
							break;
						case(75):
							d--;
							break;
						case(80):
							d++;
							break;
						case(77):
							d++;
							break;
						case(13): //если нажмет на enter
							d = d % 6;
							switch (d)
							{
							case(0):
								cout << "введите номер магазина" << endl;
								cin >> vivod;
								vivod--;  //переходим на индекс (первый элемент = 0)
								if ((vivod > 0) && (vivod < n)) {
									edit(name, addr, tele, time, n, vivod);
								}
								break;
							case(1):
								search_magaz(name, n, vivod, d1);
								if ((vivod > 0) && (vivod < n) && (d != 0)) {
									edit(name, addr, tele, time, n, vivod);
								}
								break;
							case(2):
								search_magaz(name, addr, n, vivod, d1);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									edit(name, addr, tele, time, n, vivod);
								}
								break;
							case(3):
								search_magaz(name, tele, n, vivod, d1);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									edit(name, addr, tele, time, n, vivod);
								}
								break;
							case(4):
								search_magaz(name, time, n, vivod, d1);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									edit(name, addr, tele, time, n, vivod);
								}
								break;
							case(5):
								work1 = 0;
								break;
							default:
								cout << "error" << endl;
								break;
							}
							break;
						}
					}
					break;
				case(2):
					//удалить
					while (work1) {
						menu2(k, d);
						g1 = _getch();
						switch (g1) {
						case(72):
							d--;
							break;
						case(75):
							d--;
							break;
						case(80):
							d++;
							break;
						case(77):
							d++;
							break;
						case(13): //если нажмет на enter
							d = d % 6;
							//узнаем что он выбрал и ищем
							switch (d)
							{
							case(5):
								work1 = 0;
								break;
							case(0):
								cout << "введите номер магазина" << endl;
								cin >> vivod;
								vivod--;  //переходим га индекс (первый элемент = 0)
								if ((vivod > 0) && (vivod < n)) {
									udal(name, addr, tele, time, n, vivod);
								}
								break;
							case(1):
								search_magaz(name, n, vivod, d);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									udal(name, addr, tele, time, n, vivod);
								}
								break;
							case(2):
								search_magaz(name, addr, n, vivod, d);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									udal(name, addr, tele, time, n, vivod);
								}
								break;
							case(3):
								search_magaz(name, tele, n, vivod, d);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									udal(name, addr, tele, time, n, vivod);
								}
								break;
							case(4):
								search_magaz(name, time, n, vivod, d);
								if (((vivod > 0) && (vivod < n)) || (d != 0)) {
									udal(name, addr, tele, time, n, vivod);
								}
								break;
							default:
								cout << "error" << endl;
								break;
							}
							break;
						}
					}
					break;
				case(3):
					//вывести
					while (work1) {
						menu3(d);
						g1 = _getch();
						switch (g1) {
						case(72):
							d--;
							break;
						case(75):
							d--;
							break;
						case(80):
							d++;
							break;
						case(77):
							d++;
							break;
						case(13): //если нажмет на enter
							d = d % 4;
							//узнаем что он выбрал и ищем
							switch (d)
							{
							case(3):
								work1 = 0;
								break;
							case(0):
								print(name, addr, tele, time, 0, n);
								break;
							case(1):
								cout << "введите какой магазин вы хотите вывести" << endl;
								cout << "всего " << n << " магазинов" << endl;
								cin >> st;
								print(name, addr, tele, time, st - 1, st);
								break;
							case(2):
								cout << "всего " << n << " магазинов" << endl;
								cout << "введите первый номер" << endl;
								cin >> st;
								cout << "введите второй номер" << endl;
								cin >> kc;

								//делает  так чтобы меньшее число было первым
								if (st > kc) {
									slash(st, kc);
								}
								//проверка равны ли они
								if (st == kc) {
									cout << "вы ввели два одинаковых числа" << endl;
									cout << "выводного числа: " << endl;
								}
								else {
									cout << "вывод от " << st << " до " << kc << ":" << endl;
								}
								print(name, addr, tele, time, st - 1, kc);
								break;
							default:
								cout << "error" << endl;
								break;
							}

						}
					}
					break;
				case(4):
					//конец
					work = 0;
					break;
				default:
					cout << "error";
					break;
				}
				break;
			}
		}

		//сохранение данных бд
		ofstream f2;
		f2.open("bd.txt");
		f2 << n << endl;
		for (int i = 0; i < n; i++) {
			f2 << name[i] << endl;
			f2 << addr[i] << endl;
			f2 << tele[i] << endl;
			f2 << time[i] << endl;
		}
		f2.close();
	}

	f1.close();
}
